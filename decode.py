import cbor2
import hashlib
from hashlib import sha256
import uuid
import json

cbor_data = bytes([191, 97, 100, 167, 98, 85, 85, 80, 62, 146, 111, 117, 211, 27, 72, 82, 179, 148, 140, 19, 245, 168, 187, 110, 97, 67, 25, 15, 185, 98, 82, 83, 24, 35, 98, 83, 78, 24, 25, 98, 80, 76, 101, 50, 52, 50, 48, 50, 98, 84, 65, 100, 48, 65, 70, 50, 98, 67, 73, 104, 48, 50, 49, 52, 48, 66, 49, 54, 255])   
cbor_data = bytes([170,97,100,167,98,73,77,111,51,53,48,52,53,55,55,57,51,56,49,50,50,54,50,97,67,26,0,50,100,161,98,82,83,24,39,98,83,78,24,39,98,80,76,101,50,52,50,48,49,98,84,65,100,56,49,65,69,98,67,73,104,48,51,51,49,67,56,48,53,97,109,134,165,97,84,250,65,215,115,77,97,72,250,66,18,197,249,97,80,250,71,194,152,138,97,71,250,70,71,120,207,97,67,25,120,36,165,97,84,250,65,188,113,44,97,72,250,65,236,53,219,97,80,250,71,194,150,85,97,71,250,70,72,174,28,97,67,26,0,9,159,254,165,97,84,250,65,171,63,11,97,72,250,65,254,170,131,97,80,250,71,194,148,120,97,71,250,70,73,108,104,97,67,26,0,18,199,216,165,97,84,250,65,166,254,92,97,72,250,66,2,136,86,97,80,250,71,194,155,241,97,71,250,70,73,150,178,97,67,26,0,27,239,178,165,97,84,250,65,164,236,205,97,72,250,66,4,23,0,97,80,250,71,194,157,46,97,71,250,70,73,182,174,97,67,26,0,37,23,140,165,97,84,250,65,164,42,166,97,72,250,66,4,194,169,97,80,250,71,194,154,218,97,71,250,70,73,193,91,97,67,26,0,46,63,102,97,98,131,164,97,65,250,191,122,0,0,97,84,250,65,214,228,96,97,86,250,64,134,49,140,97,67,25,120,51,164,97,65,250,128,0,0,0,97,84,250,65,169,236,0,97,86,250,64,134,9,130,97,67,26,0,18,199,231,164,97,65,250,191,122,0,0,97,84,250,65,164,74,128,97,86,250,64,134,9,130,97,67,26,0,37,23,155])
decoded_data = cbor2.loads(cbor_data)
print(decoded_data)
mapped_data = {
    "d": "device_info",
    "IM": "IMEI",
    "UU": "UUID",
    "RS": "cell_RSSI",
    "SN": "SignalNoiseRatio",
    "PL": "PLMN",
    "TA": "TrackingAreaCode",
    "CI": "CellID",
    "C": "device_timestamp",
    "m": "measurement",
    "T": "temperature",
    "H": "humidity",
    "P": "pressure",
    "G": "gasResistance",
    "L": "latitude",
    "O": "longitude",
    "b": "battery_info",
    "V": "batteryVoltage",
    "A": "chargingCurrent",
    "t": "batteryTemp",
    "S": "chargingStatus"
}

def remap_keys(data, mapping):
    if isinstance(data, dict):
        return {mapping.get(k, k): remap_keys(v, mapping) for k, v in data.items()}
    elif isinstance(data, list):
        return [remap_keys(i, mapping) for i in data]
    else:
        return data

# Apply remapping
remapped_data = remap_keys(decoded_data, mapped_data)
# Convert to JSON
json_data = json.dumps(remapped_data, indent=4)
print(json_data)